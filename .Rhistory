return(NA)
}
# Returns indizes of search columns
get_indizes <- function(names, colnames=col_names){
if(length(names) == 1){
return(get_index(names))
}else{
ind_out <- rep(NA, length(names))
for(i in 1:length(names)){
ind_out[i] <- get_index(names[i])
}
not_found <- which(is.na(ind_out))
if(length(not_found) >= 1){
print("Only returning found columns!")
print("The following columns were not found:")
print_list(names[not_found])
}
return(ind_out[which(!is.na(ind_out))])
}
}
###################################################################################################
# Section 1: SET-UP DATA
path <- "data"
# Read generated badewetter-index file
badeindex_data <- read.csv(paste(path, "index/badeindex.csv", sep = "/"), header = T, na.strings = "-")
col_names <- colnames(badeindex_data)
# subset columns for badewetter-index interpolation
indizes <- get_indizes(c("Latitude", "Longitude", "Index"))
index_subset <- badeindex_data[,indizes]
# Convert file to GeoJSON
lat_lon <- get_indizes(c("Latitude", "Longitude"))
lat_lon
toGeoJSON(badeindex_data, "badewetter", path, lat.lon = lat_lon, overwrite = T)
file <- readLines("data/badewetter.geojson")
file[1]
file[2]
file[3]
install.packages("geojsonio")
.libPaths()
library(geojsonio)
.libPaths()
library(geojsonio)
#libraries
library(rjson)
library(leafletR)
# Print list
print_list <- function(vector_of_strings){
for(i in 1:length(vector_of_strings)){
print(paste(i, ": " , vector_of_strings[i], sep=""))
}
}
# Returns index of a column
get_index <- function(name, colnames=col_names){
if(length(grep(name, col_names)) > 0){
return(grep(name, col_names))
}
return(NA)
}
# Returns indizes of search columns
get_indizes <- function(names, colnames=col_names){
if(length(names) == 1){
return(get_index(names))
}else{
ind_out <- rep(NA, length(names))
for(i in 1:length(names)){
ind_out[i] <- get_index(names[i])
}
not_found <- which(is.na(ind_out))
if(length(not_found) >= 1){
print("Only returning found columns!")
print("The following columns were not found:")
print_list(names[not_found])
}
return(ind_out[which(!is.na(ind_out))])
}
}
###################################################################################################
# Section 1: SET-UP DATA
path <- "data"
# Read generated badewetter-index file
badeindex_data <- read.csv(paste(path, "index/badeindex.csv", sep = "/"), header = T, na.strings = "-")
col_names <- colnames(badeindex_data)
# subset columns for badewetter-index interpolation
indizes <- get_indizes(c("Latitude", "Longitude", "Index"))
index_subset <- badeindex_data[,indizes]
# Convert file to GeoJSON
lat_lon <- get_indizes(c("Latitude", "Longitude"))
library(maps)
us.cities
geojson_read("data/badewetter.geojson")
test <- geojson_read("data/badewetter.geojson")
test
summary(test)
file[1]
file <- readLines("data/badewetter.geojson")
file[1]
file[2]
file[3]
file[4]
file <- readLines("data/badewetter.geojson")
file
file[1]
file[2]
file[3]
dim(file)
length(file)
new_file <- rep(NA, length(file)+2)
new_file
file[1]
file[2]
new_file[1:2] <- file[1:2]
new_file[5:length(new_file)] <- file[3:length(file)]
new_file[3] <-
line1 <- '  "name": "kantone_lines" ,'
line2 <- '  "crs": {"type": "EPSG", "properties": {"code": 21781}},'
new_file[4] <- line2
new_file[3] <- line1
writeLines(new_file, con="data/badewetter.geojson")
"data/badewetter.geojson"
# libraries / functions
source("index_auxiliary.R")
library(leafletR)
# SETTINGS
# set-up values
path = "data"
# Setting Max-values + weights for calculation
# Temperature (degC)
temp_max <-  45
temp_wgt <-  0.4
# Precipitation (mm)
prec_wgt <- 0.2
# Sunshine Durance (min)
sun_max <- 10
sun_wgt <- 0.05
# Global Radiation (W/m^2)
glob_max <- 1000
glob_wgt <- 0.05
# RH / Relative Humidity (%)
feu_wgt <- 0.15
# Wind (km/h)
wind_max <- 25
wind_wgt <- 0.15
# Read-in data
joined_data <- read.csv(paste(path, "meteoswiss_data/weatherdata_joined.csv", sep = "/"), na.strings = "-", encoding = "ISO-8859-1", header = T,
check.names = F)
# get dimensions r-rows, c-cols
dims <- dim(joined_data)
r <- dims[1]
c <- dims[2]
# Badewetter-Index Calculation
index <- rep(NA, r)
col_names <- colnames(joined_data)
# BADEWETTER-INDEX CALCULATION
for(i in 1:r){
temp <- as.numeric(joined_data[i,grep("Temp+", col_names)])
print(temp)
prec <- as.numeric(joined_data[i,grep("Nieder+", col_names)])
sun <- as.numeric(joined_data[i,grep("Sonnen+", col_names)])
glob <- as.numeric(joined_data[i,grep("Global+", col_names)])
feu <- as.numeric(joined_data[i,grep("Luftfeu+", col_names)])
wind <- as.numeric(joined_data[i,grep("Windgesch+", col_names)])
# Index is only calculated if two most important variables (temperature + precipitation) are available
if(!(is.na(temp) || is.na(prec))){
#index[i] <- 0.4*temp + 0.2*prec + 0.05*sun + 0.05*glob + 0.15*feu + 0.15*wind
index[i] <- temp_cont(temp, temp_wgt, temp_max) + prec_cont(prec, prec_wgt) + sun_cont(sun, sun_wgt, sun_max) +
glob_cont(glob, glob_wgt, glob_max) + feu_cont(feu, feu_wgt) + wind_cont(wind, wind_wgt, wind_max)
}
}
# Possible Index-Range with given specifications for max-variables + weights
#maxindex
maxi <- temp_cont(temp_max, temp_wgt, temp_max) + prec_cont(0, prec_wgt) + sun_cont(sun_max, sun_wgt, sun_max) +
glob_cont(glob_max, glob_wgt, glob_max) + feu_cont(90, feu_wgt) + wind_cont(0, wind_wgt, wind_max)
(maxi*100)
#minindex
mini <- temp_cont(-10, temp_wgt, temp_max) + prec_cont(1, prec_wgt) + sun_cont(0, sun_wgt, sun_max) +
glob_cont(0, glob_wgt, glob_max) + feu_cont(0, feu_wgt) + wind_cont(wind_max, wind_wgt, wind_max)
(mini*100)
# Standardization
index <- 1/maxi*index
# Scale Index up + add to data
index <- as.integer(index*100)
joined_data[,c+1] <- index
colnames(joined_data)[c+1] <- "Index"
# update colnames
col_names <- colnames(joined_data)
# Create directory
dir.create(paste(path, "index", sep="/"), showWarnings = F)
#Write csv
write.csv(joined_data, paste(path, "index/badeindex.csv", sep = "/"), row.names = F, na = "-", fileEncoding = "ISO-8859-1")
col_names
# Create GeoJSON from station data
# Convert file to GeoJSON
lat_lon <- c(grep("Lat+", col_names), grep("Lon+", col_names))
lat_lon
toGeoJSON(joined_data, "badewetter2", path, lat.lon = lat_lon, overwrite = T)
test = '  "crs": {"type": "EPSG", "properties": {"code": 21781}},'
epsg = 2020
test = '  "crs": {"type": "EPSG", "properties": {"code": '
paste(test, as.character(epsg))
paste(test, as.character(epsg), "")
paste(test, as.character(epsg), sep = "")
test = paste(test, as.character(epsg), sep = "")
test
print(test)
test
paste(test, "}},", sep = "")
line2 <- paste(paste('  "crs": {"type": "EPSG", "properties": {"code": ', as.character(epsg), sep = ""), "}},", sep = "")
line2
"hello world paste(sj)"
# Prepare name + crs strings
line1 <- paste('  "name": ', paste("\"", name, "\"", sep = ""), ",", sep = "")
name = "test"
# Prepare name + crs strings
line1 <- paste('  "name": ', paste("\"", name, "\"", sep = ""), ",", sep = "")
line1
line1
line2
file
filepath = "data/badewetter2.geojson"
# Read-in file
file <- readLines(filepath)
# Determine at which position the FeatureCollection-statement occurs
at_which <- grep("*FeatureCollection*", file)
at_which
at_which+3
add_Name_CRS <- function(filepath, name, epsg){
# Read-in file
file <- readLines(filepath)
# Determine at which position the FeatureCollection-statement occurs
at_which <- grep("*FeatureCollection*", file)
# prepare new file with 2 added lines: name + CRS
new_file <- rep(NA, length(file)+2)
# Prepare name + crs strings
line1 <- paste('  "name": ', paste("\"", name, "\"", sep = ""), ",", sep = "")
line2 <- paste(paste('  "crs": {"type": "EPSG", "properties": {"code": ', as.character(epsg), sep = ""), "}},",
sep = "")
# Insert new lines at correct positions
new_file[1:at_which] <- file[1:at_which]
new_file[at_which+3:length(new_file)] <- file[at_which+1:length(file)]
new_file[at_which+1] <- line1
new_file[at_which+2] <- line2
writeLines(new_file, con=filepath)
}
# Add name + CRS
add_Name_CRS(paste(path, "badewetter.geojson", sep = "/"), "badewetter", 21781)
# Add name + CRS
add_Name_CRS(paste(path, "badewetter2.geojson", sep = "/"), "badewetter", 21781)
toGeoJSON(joined_data, "badewetter", path, lat.lon = lat_lon, overwrite = T)
filepath
filepath = "data/badewetter.geojson"
toGeoJSON(joined_data, "badewetter2", path, lat.lon = lat_lon, overwrite = T)
# Add name + CRS
add_Name_CRS(paste(path, "badewetter2.geojson", sep = "/"), "badewetter", 21781)
toGeoJSON(joined_data, "badewetter", path, lat.lon = lat_lon, overwrite = T)
filepath
# Read-in file
file <- readLines(filepath)
file[length(file)]
# Determine at which position the FeatureCollection-statement occurs
at_which <- grep("*FeatureCollection*", file)
# prepare new file with 2 added lines: name + CRS
new_file <- rep(NA, length(file)+2)
length(file)
length(new_file)
# Prepare name + crs strings
line1 <- paste('  "name": ', paste("\"", name, "\"", sep = ""), ",", sep = "")
line2 <- paste(paste('  "crs": {"type": "EPSG", "properties": {"code": ', as.character(epsg), sep = ""), "}},",
sep = "")
line1
line2
# Prepare name + crs strings
name <- paste('  "name": ', paste("\"", name, "\"", sep = ""), ",", sep = "")
crs_string <- paste(paste('  "crs": {"type": "EPSG", "properties": {"code": ', as.character(epsg), sep = ""), "}},",
sep = "")
add_Name_CRS <- function(filepath, name, epsg){
# Read-in file
file <- readLines(filepath)
# Determine at which position the FeatureCollection-statement occurs
at_which <- grep("*FeatureCollection*", file)
# prepare new file with 2 added lines: name + CRS
new_file <- rep(NA, length(file)+2)
# Prepare name + crs strings
name <- paste('  "name": ', paste("\"", name, "\"", sep = ""), ",", sep = "")
crs_string <- paste(paste('  "crs": {"type": "EPSG", "properties": {"code": ', as.character(epsg), sep = ""), "}},",
sep = "")
# Insert new lines at correct positions
new_file[1:at_which] <- file[1:at_which]
new_file[at_which+3:length(new_file)] <- file[at_which+1:length(file)]
new_file[at_which+1] <- name
new_file[at_which+2] <- crs_string
writeLines(new_file, con=filepath)
}
crs_string
new_file[length(new_file)]
at_which
# Insert new lines at correct positions
new_file[1:at_which] <- file[1:at_which]
new_file[1:2]
file
at_which+3
new_file[at_which+3:length(new_file)] <- file[at_which+1:length(file)]
new_file[length(new_file)]
file[length(file)]
length(file[at_which+1:length(file)])
length(new_file[at_which+3:length(new_file)])
length(new_file)
# prepare new file with 2 added lines: name + CRS
new_file <- rep(NA, length(file)+2)
length(new_file)
length(file)
length(new_file[at_which+3:length(new_file)])
at_which
library(leafletR)
# libraries / functions
source("index_auxiliary.R")
library(leafletR)
# to add
add_Name_CRS <- function(filepath, name, epsg){
# Read-in file
file <- readLines(filepath)
# Determine at which position the FeatureCollection-statement occurs
at_which <- grep("*FeatureCollection*", file)
# prepare new file with 2 added lines: name + CRS
new_file <- rep(NA, length(file)+2)
# Prepare name + crs strings
name <- paste('  "name": ', paste("\"", name, "\"", sep = ""), ",", sep = "")
crs_string <- paste(paste('  "crs": {"type": "EPSG", "properties": {"code": ', as.character(epsg), sep = ""), "}},",
sep = "")
# Insert new lines at correct positions
# TODO: correct file assignment
new_file[1:at_which] <- file[1:at_which]
new_file[at_which+3:length(new_file)] <- file[at_which+1:length(file)]
new_file[at_which+1] <- name
new_file[at_which+2] <- crs_string
writeLines(new_file, con=filepath)
}
# SETTINGS
# set-up values
path = "data"
# Setting Max-values + weights for calculation
# Temperature (degC)
temp_max <-  45
temp_wgt <-  0.4
# Precipitation (mm)
prec_wgt <- 0.2
# Sunshine Durance (min)
sun_max <- 10
sun_wgt <- 0.05
# Global Radiation (W/m^2)
glob_max <- 1000
glob_wgt <- 0.05
# RH / Relative Humidity (%)
feu_wgt <- 0.15
# Wind (km/h)
wind_max <- 25
wind_wgt <- 0.15
# Read-in data
joined_data <- read.csv(paste(path, "meteoswiss_data/weatherdata_joined.csv", sep = "/"), na.strings = "-", encoding = "ISO-8859-1", header = T,
check.names = F)
# get dimensions r-rows, c-cols
dims <- dim(joined_data)
r <- dims[1]
c <- dims[2]
# Badewetter-Index Calculation
index <- rep(NA, r)
col_names <- colnames(joined_data)
# BADEWETTER-INDEX CALCULATION
for(i in 1:r){
temp <- as.numeric(joined_data[i,grep("Temp+", col_names)])
print(temp)
prec <- as.numeric(joined_data[i,grep("Nieder+", col_names)])
sun <- as.numeric(joined_data[i,grep("Sonnen+", col_names)])
glob <- as.numeric(joined_data[i,grep("Global+", col_names)])
feu <- as.numeric(joined_data[i,grep("Luftfeu+", col_names)])
wind <- as.numeric(joined_data[i,grep("Windgesch+", col_names)])
# Index is only calculated if two most important variables (temperature + precipitation) are available
if(!(is.na(temp) || is.na(prec))){
#index[i] <- 0.4*temp + 0.2*prec + 0.05*sun + 0.05*glob + 0.15*feu + 0.15*wind
index[i] <- temp_cont(temp, temp_wgt, temp_max) + prec_cont(prec, prec_wgt) + sun_cont(sun, sun_wgt, sun_max) +
glob_cont(glob, glob_wgt, glob_max) + feu_cont(feu, feu_wgt) + wind_cont(wind, wind_wgt, wind_max)
}
}
# Possible Index-Range with given specifications for max-variables + weights
#maxindex
maxi <- temp_cont(temp_max, temp_wgt, temp_max) + prec_cont(0, prec_wgt) + sun_cont(sun_max, sun_wgt, sun_max) +
glob_cont(glob_max, glob_wgt, glob_max) + feu_cont(90, feu_wgt) + wind_cont(0, wind_wgt, wind_max)
(maxi*100)
#minindex
mini <- temp_cont(-10, temp_wgt, temp_max) + prec_cont(1, prec_wgt) + sun_cont(0, sun_wgt, sun_max) +
glob_cont(0, glob_wgt, glob_max) + feu_cont(0, feu_wgt) + wind_cont(wind_max, wind_wgt, wind_max)
(mini*100)
# Standardization
index <- 1/maxi*index
# Scale Index up + add to data
index <- as.integer(index*100)
joined_data[,c+1] <- index
colnames(joined_data)[c+1] <- "Index"
# update colnames
col_names <- colnames(joined_data)
# Create directory
dir.create(paste(path, "index", sep="/"), showWarnings = F)
#Write csv
write.csv(joined_data, paste(path, "index/badeindex.csv", sep = "/"), row.names = F, na = "-", fileEncoding = "ISO-8859-1")
# Create GeoJSON from station data
# Convert file to GeoJSON
lat_lon <- c(grep("Lat+", col_names), grep("Lon+", col_names))
lat_lon
# Add name + CRS
add_Name_CRS(paste(path, "badewetter2.geojson", sep = "/"), "badewetter", 21781)
toGeoJSON(joined_data, "badewetter", path, lat.lon = lat_lon, overwrite = T)
add_Name_CRS <- function(filepath, name, epsg){
# Read-in file
file <- readLines(filepath)
# Determine at which position the FeatureCollection-statement occurs
at_which <- grep("*FeatureCollection*", file)
# prepare new file with 2 added lines: name + CRS
new_file <- rep(NA, length(file)+2)
# Prepare name + crs strings
name <- paste('  "name": ', paste("\"", name, "\"", sep = ""), ",", sep = "")
crs_string <- paste(paste('  "crs": {"type": "EPSG", "properties": {"code": ', as.character(epsg), sep = ""), "}},",
sep = "")
# Insert new lines at correct positions
# TODO: correct file assignment
new_file[1:at_which] <- file[1:at_which]
new_file[at_which+3:length(new_file)] <- file[at_which+1:length(file)]
new_file[at_which+1] <- name
new_file[at_which+2] <- crs_string
new_file <- new_file[1:length(new_file)-2]
writeLines(new_file, con=filepath)
}
# Add name + CRS
add_Name_CRS(paste(path, "badewetter.geojson", sep = "/"), "badewetter", 21781)
filepath="data/badewetter.geojson"
# Read-in file
file <- readLines(filepath)
length(file)
# Determine at which position the FeatureCollection-statement occurs
at_which <- grep("*FeatureCollection*", file)
at_which
# prepare new file with 2 added lines: name + CRS
new_file <- rep(NA, length(file)+2)
# Prepare name + crs strings
name <- paste('  "name": ', paste("\"", name, "\"", sep = ""), ",", sep = "")
crs_string <- paste(paste('  "crs": {"type": "EPSG", "properties": {"code": ', as.character(epsg), sep = ""), "}},",
sep = "")
name="badewetter"
epsg = 21781
# Prepare name + crs strings
name <- paste('  "name": ', paste("\"", name, "\"", sep = ""), ",", sep = "")
crs_string <- paste(paste('  "crs": {"type": "EPSG", "properties": {"code": ', as.character(epsg), sep = ""), "}},",
sep = "")
crs_string
name
new_file[1:at_which]
new_file[1:at_which] <-  file[1:at_which]
new_file
new_file[at_which]
new_file[at_which+1]
new_file[at_which+1] <- name
new_file[at_which+1]
new_file
length(new_file)
new_file[at_which+2] <- crs_string
length(new_file)
new_file[at_which+2]
new_file[1:10]
length(new_file)
new_file[at_which+3:length(new_file)]
all(is.na(new_file[at_which+3:length(new_file)]))
length(new_file[at_which+3:length(new_file)])
length(new_file)
file[at_which+1:length(file)]
length(file[at_which+1:length(file)])
new_file[1:3]
new_file[1:4]
new_file[at_which+3:length(new_file)] <- file[at_which+1:length(file)]
new_file[length(new_file)]
new_file[length(new_file)-1]
new_file[length(new_file)-2]
new_file <- new_file[1:(length(new_file)-2)]
new_file[length(new_file)]
writeLines(new_file, con=filepath)
# to add
add_Name_CRS <- function(filepath, name, epsg){
# Read-in file
file <- readLines(filepath)
# Determine at which position the FeatureCollection-statement occurs
at_which <- grep("*FeatureCollection*", file)
# prepare new file with 2 added lines: name + CRS
new_file <- rep(NA, length(file)+2)
# Prepare name + crs strings
name <- paste('  "name": ', paste("\"", name, "\"", sep = ""), ",", sep = "")
crs_string <- paste(paste('  "crs": {"type": "EPSG", "properties": {"code": ', as.character(epsg), sep = ""), "}},",
sep = "")
# Insert new lines at correct positions
# TODO: correct file assignment
new_file[1:at_which] <- file[1:at_which]
new_file[at_which+1] <- name
new_file[at_which+2] <- crs_string
new_file[(at_which+3):length(new_file)] <- file[(at_which+1):length(file)]
new_file <- new_file[1:(length(new_file)-2)]
writeLines(new_file, con=filepath)
}
toGeoJSON(joined_data, "badewetter", path, lat.lon = lat_lon, overwrite = T)
# Add name + CRS
add_Name_CRS(paste(path, "badewetter.geojson", sep = "/"), "badewetter", 21781)
# Write csvt-file with type of each column (required for reading table in QGIS)
if(!file.exists(paste(path, "index/badeindex.csvt", sep = "/"))){
col_type <- c("\"String\", \"String\", \"Real\", \"Real\", \"Real\", \"Real\", \"Real\", \"Real\", \"Real\", \"Real\", \"Real\", \"Real\", \"Real\"")
write(col_type, paste(path, "index/badeindex.csvt", sep = "/"), ncolumns = length(col_names))
}
rm(list=ls())
